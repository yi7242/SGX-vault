enclave
{
    include "sgx_trts.h"
    include "sgx_utils.h"
    include "sgx_tkey_exchange.h"

    from "sgx_tswitchless.edl" import *;
    from "sgx_tkey_exchange.edl" import *;

    /* ECALLのプロトタイプを記述 */
    trusted
    {   
        /* RAの初期化 */
        public sgx_status_t ecall_ra_init([out]sgx_ra_context_t *ra_ctx);

        /* RAの終了 */
        public sgx_status_t ecall_ra_close(sgx_ra_context_t ra_ctx);

        /* 暗号化された2つの値を加算して結果を暗号化し返却 */
        public sgx_status_t ecall_sample_addition(sgx_ra_context_t ra_ctx,
            [in, size=cipher1_len]uint8_t *cipher1, size_t cipher1_len,
            [in, size=cipher2_len]uint8_t *cipher2, size_t cipher2_len,
            [in, size=12]uint8_t *iv,
            [in, size=16]uint8_t *tag1, [in, size=16]uint8_t *tag2, 
            [out, size=32]uint8_t *result, [out]size_t *result_len,
            [out, size=12]uint8_t *iv_result, [out, size=16]uint8_t *tag_result);

        public sgx_status_t ecall_master_sealing(sgx_ra_context_t ra_ctx,
            [in, size=master_len]uint8_t *master, size_t master_len,
            [in, size=12]uint8_t *iv,
            [in, size=16]uint8_t *master_tag, int policy);
            
        public int calc_sealed_len(int message_len);
		
		public void do_sealing([in, size=message_len]uint8_t *message,
			int message_len, [in, out, size=sealed_len]uint8_t *sealed,
			int sealed_len, int policy);

		public int calc_unsealed_len([in, size=sealed_len]uint8_t *sealed,
			int sealed_len);

		public void do_unsealing([in, size=sealed_len]uint8_t *sealed,
			int sealed_len,
			[in, out, size=unsealed_len]uint8_t *unsealed,
			int unsealed_len, [out]int *error_flag);
    };

    /* OCALLのプロトタイプを記述 */
    untrusted
    {
        void ocall_print([in, string]const char *str, int log_type);

        void ocall_print_status(sgx_status_t st);
        int ocall_store_sealed_master([in, string]const char *sealed, int sealed_len);
    };
};
